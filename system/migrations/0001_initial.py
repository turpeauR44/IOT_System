# Generated by Django 3.2.7 on 2021-09-28 08:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wshop', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Analog_IO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min', models.IntegerField(default=0)),
                ('val_min', models.IntegerField(default=0)),
                ('max', models.IntegerField(default=0)),
                ('val_max', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'signaux analogiques',
                'db_table': 'TAB_ANALOG_I0S',
            },
        ),
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=16, unique=True)),
                ('board', models.CharField(choices=[('uno', 'Arduino uno'), ('nano', 'Arduino nano'), ('uno_gen', 'Generic uno'), ('nano_gen', 'Generic nano')], default='nano', max_length=16)),
                ('baud', models.IntegerField(default=9600)),
                ('serial', models.CharField(default='None', max_length=32)),
                ('period', models.IntegerField(default=15000)),
                ('transfer_dur', models.IntegerField(default=10)),
                ('nb_pulsmax', models.IntegerField(default=100)),
            ],
            options={
                'verbose_name': 'Controller',
                'verbose_name_plural': 'Controllers',
                'db_table': 'TAB_CONTROLLERS',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(default='CROWNXXXX', max_length=12, verbose_name='designation')),
                ('model', models.CharField(choices=[('pi4_8go', 'Raspberry Pi 4 - 8Go'), ('pi4_4go', 'Raspberry Pi 4 - 4Go'), ('pi4_2go', 'Raspberry Pi 4 - 2Go'), ('pi3_1go', 'Raspberry Pi 3 model B+ - 1Go'), ('pi0_512mo', 'Raspberry Pi 0 - 512Mo')], default='pi4_4go', max_length=12, verbose_name='modèle')),
            ],
            options={
                'verbose_name': 'micro-ordinateur',
                'verbose_name_plural': 'Processing Unit',
                'db_table': 'TAB_CPUS',
            },
        ),
        migrations.CreateModel(
            name='Database',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(default='postgres', max_length=32)),
                ('password', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name': 'Database système',
                'verbose_name_plural': 'Databases système',
                'db_table': 'TAB_DATABASES',
            },
        ),
        migrations.CreateModel(
            name='Digital_IO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial', models.IntegerField(default=0)),
                ('Period_Min', models.IntegerField(default=100)),
                ('Pulse_Min', models.IntegerField(default=100)),
                ('Period_Max', models.IntegerField(default=100)),
                ('Pulse_Max', models.IntegerField(default=100)),
            ],
            options={
                'verbose_name': 'signaux digitaux',
                'db_table': 'TAB_DIGITAL_I0S',
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=16, unique=True)),
                ('type', models.CharField(choices=[('p', 'Ligne de production'), ('e', 'Equipement'), ('w', 'Atelier'), ('s', 'Serveur')], default='e', max_length=4)),
            ],
            options={
                'verbose_name': 'Guest',
                'verbose_name_plural': '_guests',
                'db_table': 'TAB_GUESTS',
            },
        ),
        migrations.CreateModel(
            name='Guest_Processus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activ', models.BooleanField(default=False)),
                ('start_at', models.DateTimeField(auto_now_add=True)),
                ('period', models.IntegerField(default=5)),
            ],
            options={
                'verbose_name': 'Guest Processus',
                'verbose_name_plural': '_guest_Processus',
                'db_table': 'TAB_GUEST_PROCESSUS',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activ', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Hôte',
                'verbose_name_plural': 'HOTES',
                'db_table': 'TAB_HOSTS',
            },
        ),
        migrations.CreateModel(
            name='Host_Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IPv4', models.GenericIPAddressField(default='0.0.0.0')),
            ],
            options={
                'verbose_name': 'adresse réseau',
                'verbose_name_plural': '_adresses réseau',
                'db_table': 'TAB_HOST_NETWORKS',
            },
        ),
        migrations.CreateModel(
            name='IO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=254)),
                ('put', models.CharField(choices=[('in', 'In'), ('out', 'Out'), ('not', 'Not')], default='in', max_length=16)),
                ('type', models.CharField(choices=[('digital', 'Digital'), ('analog', 'Analog'), ('not', 'Not')], default='digital', max_length=16)),
                ('code', models.CharField(max_length=16)),
                ('pin', models.CharField(max_length=16)),
            ],
            options={
                'verbose_name': 'io',
                'db_table': 'TAB_IOS',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Log',
                'verbose_name_plural': 'Log',
                'db_table': 'TAB_LOGS',
            },
        ),
        migrations.CreateModel(
            name='Log_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=16)),
                ('subtype', models.CharField(max_length=16)),
                ('io_type', models.CharField(choices=[('digital', 'Digital'), ('analog', 'Analog'), ('not', 'Not')], max_length=16)),
                ('io_put', models.CharField(choices=[('in', 'In'), ('out', 'Out'), ('not', 'Not')], max_length=16)),
            ],
            options={
                'verbose_name': 'Type Log',
                'verbose_name_plural': 'Type Log',
                'db_table': 'TAB_LOG_TYPES',
            },
        ),
        migrations.CreateModel(
            name='OS',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=16, unique=True)),
                ('ssh_pub', models.CharField(blank=True, max_length=512, null=True)),
                ('type', models.CharField(choices=[('win', 'Windows'), ('full', 'Raspbian Buster'), ('lite', 'Raspbian Buster lite')], default='full', max_length=12, verbose_name='Operating System')),
            ],
            options={
                'verbose_name': 'OS',
                'verbose_name_plural': 'OS',
                'db_table': 'TAB_SDCARDS',
            },
        ),
        migrations.CreateModel(
            name='Processus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=16, unique=True)),
                ('details', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Processus',
                'verbose_name_plural': '_processus',
                'db_table': 'TAB_PROCESSUS',
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=12, unique=True)),
                ('desc', models.CharField(max_length=128)),
                ('installer', models.CharField(choices=[('undefined', 'non-défini'), ('apt', 'apt'), ('pip', 'pip')], default='undefined', max_length=24)),
                ('package', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Logiciel',
                'verbose_name_plural': '_Softwares',
                'db_table': 'TAB_SOFTWARES',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=16, unique=True)),
                ('environnement', models.CharField(choices=[('dev', 'Développement'), ('prod', 'Production'), ('test', 'Test')], default='dev', max_length=4)),
                ('activ', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'System',
                'verbose_name_plural': '_systems',
                'db_table': 'TAB_SYSTEMS',
            },
        ),
        migrations.CreateModel(
            name='OS_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(blank=True, max_length=512, null=True)),
                ('os', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.os')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'utilisateur OS',
                'verbose_name_plural': 'Utilisateurs OS',
                'db_table': 'TAB_USER_OS',
            },
        ),
        migrations.CreateModel(
            name='OS_Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('os', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.os')),
                ('software', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.software')),
            ],
            options={
                'verbose_name': 'Liaison Logiciel OS',
                'verbose_name_plural': 'Liaison Logiciels OS',
                'db_table': 'TAB_OS_SOFTWARES',
            },
        ),
        migrations.AddField(
            model_name='os',
            name='softwares',
            field=models.ManyToManyField(through='system.OS_Software', to='system.Software'),
        ),
        migrations.AddField(
            model_name='os',
            name='users',
            field=models.ManyToManyField(through='system.OS_User', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='NetworkCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac_addr', models.CharField(default='00:00:00:00:00:00', max_length=17, unique=True, verbose_name='adresse mac')),
                ('type', models.CharField(choices=[('eth', 'réseau ethernet'), ('wlan', 'wifi')], default='eth', max_length=4, verbose_name='type')),
                ('detail', models.CharField(default='eth0', max_length=8, verbose_name='détails')),
                ('cpu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.cpu')),
            ],
            options={
                'verbose_name': 'Carte réseau',
                'verbose_name_plural': '_Cartes réseau',
                'db_table': 'TAB_NETWORKCARDS',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desi', models.CharField(max_length=16)),
                ('type', models.CharField(choices=[('eth', 'réseau ethernet'), ('wlan', 'wifi')], default='eth', max_length=4)),
                ('network', models.GenericIPAddressField(default='255.255.255.0')),
                ('netmask', models.GenericIPAddressField(default='255.255.255.0')),
                ('broadcast', models.GenericIPAddressField(default='255.255.255.0')),
                ('system', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='system.system')),
            ],
            options={
                'verbose_name': 'Réseau',
                'verbose_name_plural': 'RESEAUX',
                'db_table': 'TAB_NETWORKS',
            },
        ),
        migrations.AddConstraint(
            model_name='log_type',
            constraint=models.UniqueConstraint(fields=('type', 'subtype', 'io_type'), name='unique type subtype et signal'),
        ),
        migrations.AddField(
            model_name='log',
            name='io',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.io'),
        ),
        migrations.AddField(
            model_name='log',
            name='log_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.log_type'),
        ),
        migrations.AddField(
            model_name='io',
            name='controller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.controller'),
        ),
        migrations.AddField(
            model_name='io',
            name='equipment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='wshop.equipment'),
        ),
        migrations.AddField(
            model_name='host_network',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.network'),
        ),
        migrations.AddField(
            model_name='host_network',
            name='networkcard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.networkcard'),
        ),
        migrations.AddField(
            model_name='host_network',
            name='routed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='router', to='system.networkcard'),
        ),
        migrations.AddField(
            model_name='host',
            name='cpu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.cpu'),
        ),
        migrations.AddField(
            model_name='host',
            name='os',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.os'),
        ),
        migrations.AddField(
            model_name='guest_processus',
            name='guest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.guest'),
        ),
        migrations.AddField(
            model_name='guest_processus',
            name='processus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.processus'),
        ),
        migrations.AddField(
            model_name='guest',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.host'),
        ),
        migrations.AddField(
            model_name='digital_io',
            name='io',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.io'),
        ),
        migrations.AddField(
            model_name='database',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.host'),
        ),
        migrations.AddField(
            model_name='controller',
            name='guest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.guest'),
        ),
        migrations.AddField(
            model_name='analog_io',
            name='io',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.io'),
        ),
        migrations.AddConstraint(
            model_name='network',
            constraint=models.UniqueConstraint(fields=('desi', 'system'), name='Réseau unique'),
        ),
        migrations.AddConstraint(
            model_name='io',
            constraint=models.UniqueConstraint(fields=('controller', 'code'), name='unique io_code par controller'),
        ),
    ]
